{"version":3,"sources":["logo.svg","reducers/defaultStore.js","reducers/BoardHelpers.js","reducers/minesweeperReducer.js","actions/boardActions.js","components/Cell.jsx","containers/Cell.js","components/Board.jsx","containers/Board.js","components/Minesweeper.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","defaultCell","hasMine","hasFlag","isOpen","count","id","defaultStore","board","forBoardSize","boardSize","callback","row","col","concat","minesweeperReducer","state","arguments","length","undefined","action","type","size","coordinate","Object","objectSpread","BoardHelpers","mineLocations","forEach","coords","split","Number","x","y","mineCheckCoord","cell","defineProperty","OpenCell","_ref","react_default","a","createElement","className","ClosedCell","FlagCell","Cell","_ref2","onOpen","onFlagToggle","onClick","onContextMenu","e","preventDefault","Cell_ClosedCell","Cell_FlagCell","Cell_OpenCell","Container","connect","ownProps","dispatch","Board","table","map","cells","key","assign","boardDim","Math","sqrt","keys","Minesweeper","src","logo","alt","Board_Container","initAction","App","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","es","components_Minesweeper","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a78a7a4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const defaultCell = {\n  hasMine: false,\n  hasFlag: false,\n  isOpen: false,\n  count: 0,\n  id: null\n}\n\nconst defaultStore = {\n  board: {}\n}\n\nexport {defaultStore as default, defaultCell}","\nimport {defaultCell} from \"./defaultStore\";\n\nconst forBoardSize = (boardSize, callback) => {\n  for(let row=0; row <boardSize; row++) {\n    for (let col=0; col < boardSize; col++) {\n      const coordinate = `${row},${col}`\n      callback(coordinate, row, col);\n    }\n  }\n}\n\nconst forSurroundCells = (coordinate, callback) => {\n  const coords = coordinate.split(',')\n  const row = Number(coords[0]);\n  const col = Number(coords[1]);\n  for (let x = row-1; x <= row + 1; x++) {\n    for (let y = col-1; y <= col+1; y++) {\n      if (x >= 0 || y >= 0) {\n        const coordinate = `${x},${y}`\n        callback(coordinate, x, y)\n      }\n    }\n  }\n}\n\nconst emptyBoard = (boardSize) => {\n  const board = {}\n  forBoardSize(boardSize, (coordinate) => {\n    board[coordinate] = {...defaultCell, id: coordinate}\n  })\n  return board;\n}\n\nexport {emptyBoard, forBoardSize, forSurroundCells};","import {INIT_BOARD, RESET_BOARD, OPEN_CELL, TOGGLE_CELL_FLAG,} from '../actions/boardActions'\nimport defaultStore, {defaultCell} from \"./defaultStore\";\nimport * as BoardHelpers from './BoardHelpers'\n\nconst minesweeperReducer = (state = defaultStore, action = {type: \"\"}) => {\n  switch (action.type) {\n    case INIT_BOARD: {\n      const boardSize = action.size\n      const board = BoardHelpers.emptyBoard(boardSize)\n      action.mineLocations.forEach((coordinate) => {\n        board[coordinate].hasMine = true\n      })\n\n      BoardHelpers.forBoardSize(boardSize, (coordinate) => {\n        if (!board[coordinate].hasMine) { \n          BoardHelpers.forSurroundCells(coordinate, (mineCheckCoord) => {\n            if (board[mineCheckCoord] && board[mineCheckCoord].hasMine) {\n              board[coordinate].count += 1;\n            }\n          }) \n        }\n      });\n\n\n      return {...state, board};\n    }\n\n    case OPEN_CELL: {\n      if (state.board[action.id].hasFlag) {\n        return state;\n      }\n      //action.id => coordinate\n      const id = action.id\n      const cell = {...state.board[action.id], isOpen: true}\n      const board = {...state.board, [id]: cell}\n      return {...state, board};\n    }\n\n    case TOGGLE_CELL_FLAG: {\n      const id = action.id\n      const cell = {...state.board[action.id], hasFlag: !state.board[action.id].hasFlag}\n      const board = {...state.board, [id]: cell}\n      return {...state, board};\n    }\n    default: \n      return state\n  }\n}\nexport default minesweeperReducer","const INIT_BOARD = 'INIT_BOARD';\nconst OPEN_CELL = 'OPEN_CELL';\nconst TOGGLE_CELL_FLAG = 'TOGGLE_CELL_FLAG';\nconst UNFLAG_CELL = 'UNFLAG_CELL';\n\nexport {INIT_BOARD, OPEN_CELL, TOGGLE_CELL_FLAG, UNFLAG_CELL}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {OPEN_CELL, TOGGLE_CELL_FLAG} from '../actions/boardActions'\n\nconst OpenCell = ({count, hasMine, isOpen}) => (\n  <div className='Cell__cover Cell__cover--opened'>\n \n  {!hasMine && \n    <span className={`Cell__number${count}`}>\n      {count}\n    </span>}\n  {hasMine && <span className={`Cell__bomb`}>b</span>}\n  </div>\n);\n\nOpenCell.propTypes = {\n  count: PropTypes.number.isRequired, \n  hasMine: PropTypes.bool.isRequired,\n  \n}\n\nconst ClosedCell = () => (\n  <div className='Cell__cover'>\n  </div>\n)\n\nconst FlagCell = () => (\n  <div className='Cell__flag'>\n  </div>\n)\n\n\nconst Cell = ({id, count, hasMine, isOpen, hasFlag, onOpen, onFlagToggle}) => {\n  return (\n  \n    <td className='Cell' onClick={()=> onOpen(id)} onContextMenu={(e) => {\n      e.preventDefault()\n      onFlagToggle(id)\n    }}>\n      {!isOpen && !hasFlag &&  <ClosedCell />}\n      {!isOpen && hasFlag &&  <FlagCell />}\n      {isOpen && <OpenCell hasMine={hasMine} count={count} />}\n    </td>\n\n  )\n}\n\nCell.propTypes = {\n  ...OpenCell.propTypes,\n  id: PropTypes.string.isRequired,\n  hasFlag: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onOpen: PropTypes.func.isRequired,\n  onFlagToggle: PropTypes.func.isRequired\n};\n\nexport default Cell;","import Cell from '../components/Cell'\nimport {connect} from 'react-redux'\nimport { bindActionCreators } from 'redux';\nimport {OPEN_CELL, TOGGLE_CELL_FLAG} from '../actions/boardActions'\n\n\nconst mapStateToProps = (state, ownProps) => ownProps;\n\nconst mapDispatchToProps = (dispatch) => ({\n  onOpen: (id) => {\n    dispatch({ type: OPEN_CELL, id });\n  },\n\n  onFlagToggle: (id) => {\n    dispatch({ type: TOGGLE_CELL_FLAG, id });\n  }\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Cell);\nexport {Container as default, mapStateToProps}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport Cell from '../containers/Cell'\n\nconst Board = ({table}) => {\n  return (\n    <table className='Table'> \n      <tbody>\n        {table.map((cells,row) => (\n           <tr key={`mine-cell-${row}`}>\n            {cells.map((cell) => (\n              <Cell key={`mine-cell-${cell.id}`} {...cell} />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n// Board.propTypes = {\n//   table: PropTypes.arrayOf(\n//     PropTypes.arrayOf(\n//       PropTypes.shape(...Cell.propTypes)\n//     )\n//   ).isRequired\n// }\n\n\nexport default Board;","import Board from '../components/Board'\nimport {connect} from 'react-redux'\nimport * as BoardHelpers  from '../reducers/BoardHelpers'\n\nconst mapStateToProps = ({board}) => {\n  const boardDim = Math.sqrt(Object.keys(board).length)\n  const table = [];\n  BoardHelpers.forBoardSize(boardDim, (coordinate, row, col) => {\n    if (!table[row]) {table[row] = [];}\n    table[row][col] = board[coordinate]\n  })\n  return {table}\n}\n\nconst Container=connect(mapStateToProps)(Board)\n\nexport {Container as default, mapStateToProps}","import React from 'react'\nimport Board from '../containers/Board'\nimport logo from '../logo.svg';\nimport './style/Minesweeper.css'\n\nconst Minesweeper = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <img src={logo} className= 'App-logo' alt='logo' />\n      <h1 className ='App-title'>React - Minesweeper</h1>\n    </header>\n    <Board />\n  </div>\n\n)\n\nexport default Minesweeper","import React, {Component} from 'react';\nimport {Provider} from 'react-redux'\nimport {createStore} from 'redux'\nimport minesweeperReducer from './reducers/minesweeperReducer'\nimport Minesweeper from './components/Minesweeper'\nimport {INIT_BOARD} from './actions/boardActions'\n\nconst initAction = {\n  type: INIT_BOARD,\n  size: 9,\n  mineLocations: [\"1,1\", \"2,2\", \"3,3\", \"1,8\"]\n}\n\nconst App = () => {\n  /* eslint-disable no-underscore-dangle */\n    const store = createStore(minesweeperReducer,\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n      )\n    store.dispatch(initAction)\n    /* eslint-enable*/\n    return (\n      <Provider store={store}>\n        <Minesweeper />\n      </Provider>\n      );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}