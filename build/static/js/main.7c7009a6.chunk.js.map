{"version":3,"sources":["logo.svg","reducers/defaultStore.js","reducers/minesweeperReducer.js","actions/boardActions.js","components/Cell.jsx","components/Row.jsx","components/Board.jsx","containers/Board.js","components/Minesweeper.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","defaultCell","hasMine","hasFlag","isOpen","count","defaultStore","board","minesweeperReducer","state","arguments","length","undefined","action","type","boardSize","size","row","col","concat","Object","objectSpread","emptyBoard","mineLocations","forEach","coordinate","mineCount","x","y","mineCheckCoord","Cell","_ref","react_default","a","createElement","Row","cells","map","cell","i","components_Cell","assign","key","Board","table","components_Row","Container","connect","boardDim","Math","sqrt","keys","Minesweeper","className","src","logo","alt","containers_Board","initAction","App","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","dispatch","es","components_Minesweeper","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c7009a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const defaultCell = {\n  hasMine: false,\n  hasFlag: false,\n  isOpen: false,\n  count: 0\n}\n\nconst defaultStore = {\n  board: {}\n}\n\nexport {defaultStore as default, defaultCell}","import {INIT_BOARD} from '../actions/boardActions'\nimport defaultStore, {defaultCell} from \"./defaultStore\";\n\nconst emptyBoard = (boardSize) => {\n  const board = {}\n  for(let row=0; row<boardSize; row++) {\n    for (let col=0; col < boardSize; col++) {\n      const coordinate = `${row},${col}`\n      board[coordinate] = {...defaultCell}\n    }\n  }\n  return board;\n}\n\nconst minesweeperReducer = (state = defaultStore, action = {type: \"\"}) => {\n  switch (action.type) {\n    case INIT_BOARD:\n      const boardSize = action.size\n      const board = emptyBoard(action.size)\n      action.mineLocations.forEach((coordinate) => {\n        board[coordinate].hasMine = true\n      })\n\n      for(let row=0; row<boardSize; row++) {\n        for (let col=0; col < boardSize; col++) {\n          const coordinate = `${row},${col}`\n          if (board[coordinate].hasMine) { continue;}\n          let mineCount = 0;\n          \n          for (let x = row-1; x <= row + 1; x++) {\n            for (let y = col-1; y <= col+1; y++) {\n              const mineCheckCoord = `${x},${y}`\n              if (board[mineCheckCoord] && board[mineCheckCoord].hasMine) {\n                mineCount++\n              }\n            }\n          }\n          board[coordinate].count = mineCount;\n        }\n      }\n\n      return {...state, board};\n    default: \n      return state\n  }\n}\nexport { minesweeperReducer as default, emptyBoard};","const INIT_BOARD = 'INIT_BOARD';\n\nexport {INIT_BOARD}","import React, {Component} from 'react'\n\nconst Cell = ({count, hasMine, isOpen}) => {\n  return (\n\n    <td>\n      {count} - {hasMine ? \"MINE\" : \"\"} - {isOpen}\n    </td>\n\n  )\n}\n\nexport default Cell;","import React, {Component} from 'react'\nimport Cell from './Cell'\n\nconst Row = ({cells}) => {\n  return (\n\n        <tr>\n          {cells.map((cell,i) => (\n            <Cell key={`mine-cell-${i}`} {...cell} />\n          ))}\n        </tr>\n\n  )\n}\n\nexport default Row;","import React, {Component} from 'react'\nimport Row from './Row'\n\n\nconst Board = ({table}) => {\n  return (\n    <table> \n      <tbody>\n        {table.map((cells, i) => (\n          <Row cells={cells} key = {`mine-row-${i}`} />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Board;","import Board from '../components/Board'\nimport {connect} from 'react-redux'\n\nconst mapStateToProps = (state) => {\n  const boardDim = Math.sqrt(Object.keys(state.board).length)\n  const table = [];\n  for (let row=0; row<boardDim; row++) {\n    table[row] = []\n    for (let col=0; col < boardDim; col++){\n      const coordinate = `${row},${col}`;\n      table[row][col] = state.board[coordinate]\n    }\n  }\n  return {\n    table\n  }\n}\n\nconst Container=connect(mapStateToProps)(Board)\n\nexport default Container","import React from 'react'\nimport Board from '../containers/Board'\nimport logo from '../logo.svg';\nimport './style/Minesweeper.css'\n\nconst Minesweeper = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <img src={logo} className= 'App-logo' alt='logo' />\n      <h1 className ='App-title'>React - fun fun fun </h1>\n    </header>\n    <Board />\n  </div>\n\n)\n\nexport default Minesweeper","import React, {Component} from 'react';\nimport {Provider} from 'react-redux'\nimport {createStore} from 'redux'\nimport minesweeperReducer from './reducers/minesweeperReducer'\nimport Minesweeper from './components/Minesweeper'\nimport {INIT_BOARD} from './actions/boardActions'\n\nconst initAction = {\n  type: INIT_BOARD,\n  size: 9,\n  mineLocations: [\"1,1\", \"2,2\", \"3,3\", \"1,8\"]\n}\n\nconst App = () => {\n  /* eslint-disable no-underscore-dangle */\n    const store = createStore(minesweeperReducer,\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n      )\n    store.dispatch(initAction)\n    /* eslint-enable*/\n    return (\n      <Provider store={store}>\n        <Minesweeper />\n      </Provider>\n      );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}